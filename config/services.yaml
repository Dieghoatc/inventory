# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    test: 'en'
    woo_commerce:
      url: '%env(WOO_COMMERCE_URL)%'
      api_key: '%env(WOO_COMMERCE_API_KEY)%'
      api_secret: '%env(WOO_COMMERCE_API_SECRET)%'
    mailer:
      from_address: '%env(MAILER_FROM_ADDRESS)%'
      from_name: '%env(MAILER_FROM_NAME)%'
      printer_address: '%env(MAILER_PRINTER_ADDRESS)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
        - { name: doctrine.event_subscriber, connection: default }

    order.listener.post.persist:
      class: 'App\EventListener\OrderListener'
      arguments: ['@doctrine.orm.entity_manager']
      tags:
        - { name: doctrine.event_listener, entity: App\Entity\Order, event: postPersist, priority: 1 }

    order.listener.post.update:
      class: 'App\EventListener\OrderListener'
      arguments: ['@doctrine.orm.entity_manager']
      tags:
        - { name: doctrine.event_listener, entity: App\Entity\Order, event: postUpdate, priority: 1 }
